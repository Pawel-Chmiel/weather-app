{"version":3,"sources":["components/Form.js","components/Result.js","components/App.js","serviceWorker.js","index.js"],"names":["Form","props","onSubmit","submit","type","placeholder","value","onChange","change","Result","weatherData","icon","city","sunrise","sunset","temp","wind","pressure","timezone","err","content","sunriseTime","Date","toLocaleTimeString","sunsetTime","cityText","toUpperCase","className","src","alt","toFixed","APIkey","App","state","handleInputChange","e","setState","target","handleCitySubmit","preventDefault","API","fetch","then","response","ok","Error","json","data","prevState","weather","sys","main","speed","catch","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iPAgBeA,EAdF,SAACC,GACV,OACI,0BAAMC,SAAUD,EAAME,QAClB,2BACIC,KAAK,OACLC,YAAY,kBACZC,MAAOL,EAAMK,MACbC,SAAUN,EAAMO,SAEpB,8CCwBGC,EAjCA,SAACR,GAAW,IAAD,EAEuDA,EAAMS,YAA3EC,EAFc,EAEdA,KAAMC,EAFQ,EAERA,KAAMC,EAFE,EAEFA,QAASC,EAFP,EAEOA,OAAQC,EAFf,EAEeA,KAAMC,EAFrB,EAEqBA,KAAMC,EAF3B,EAE2BA,SAAUC,EAFrC,EAEqCA,SAAUC,EAF/C,EAE+CA,IACjEC,EAAU,KACd,IAAKD,GAAOP,EAAM,CACd,IAAMS,EAAc,IAAIC,KAAmC,KAA7BT,EAAUK,EAAW,OAAcK,qBAC3DC,EAAa,IAAIF,KAAkC,KAA5BR,EAASI,EAAW,OAAcK,qBACzDE,EAAWb,EAAKc,cAEtBN,EACI,yBAAKO,UAAU,UACX,4BAAKF,GACL,yBACIE,UAAU,OACVC,IAAG,2CAAsCjB,EAAtC,QACHkB,IAAI,gBAER,wBAAIF,UAAU,QAAQZ,EAAKe,QAAQ,GAAnC,SACA,2DAAmB,8BAAOT,IAC1B,2DAAmB,8BAAOG,IAC1B,+CAAe,8BAAOP,GAAtB,QACA,+DAAqB,8BAAOD,GAA5B,UAKZ,OACI,oCACKG,EAAM,6DAA+BP,IAAcQ,ICxB1DW,G,MAAS,oCA0EAC,E,2MAvEbC,MAAQ,CACN3B,MAAO,GACPK,KAAM,GACNC,KAAM,GACNC,QAAS,GACTC,OAAQ,GACRC,KAAM,GACNC,KAAM,GACNC,SAAU,GACVC,SAAU,GACVC,KAAK,G,EAKPe,kBAAoB,SAACC,GACnB,EAAKC,SAAS,CACZ9B,MAAO6B,EAAEE,OAAO/B,S,EAIpBgC,iBAAmB,SAACH,GAClBA,EAAEI,iBACF,IAAMC,EAAG,4DAAwD,EAAKP,MAAM3B,MAAnE,kBAAkFyB,EAAlF,iBACTU,MAAMD,GACHE,MAAK,SAAAC,GACJ,IAAoB,IAAhBA,EAASC,GACX,OAAOD,EACP,MAAME,MAAM,yFAEfH,MAAK,SAAAC,GAAQ,OAAIA,EAASG,UAC1BJ,MAAK,SAAAK,GACJ,EAAKX,UAAS,SAAAY,GAAS,MAAK,CAC1B7B,KAAK,EACLP,KAAMoC,EAAU1C,MAChBK,KAAMoC,EAAKE,QAAQ,GAAGtC,KACtBE,QAASkC,EAAKG,IAAIrC,QAClBC,OAAQiC,EAAKG,IAAIpC,OACjBC,KAAMgC,EAAKI,KAAKpC,KAChBC,KAAM+B,EAAK/B,KAAKoC,MAChBnC,SAAU8B,EAAKI,KAAKlC,SACpBC,SAAU6B,EAAK7B,SACfZ,MAAO,UAIV+C,OAAM,SAAAlC,GACLmC,QAAQC,IAAIpC,GAEZ,EAAKiB,UAAS,SAAAY,GAAS,MAAK,CAC1B7B,KAAK,EACLP,KAAMoC,EAAU1C,c,wEAMtB,OACE,yBAAKqB,UAAU,OACb,kDACA,kBAAC,EAAD,CACErB,MAAOkD,KAAKvB,MAAM3B,MAClBE,OAAQgD,KAAKtB,kBACb/B,OAAQqD,KAAKlB,mBAEf,kBAAC,EAAD,CAAQ5B,YAAa8C,KAAKvB,a,GAlEhBwB,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,MAAK,SAAA4B,GACjCA,EAAaC,iB","file":"static/js/main.3342296e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Form = (props) => {\r\n    return (\r\n        <form onSubmit={props.submit}>\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"wpisz miasto...\"\r\n                value={props.value}\r\n                onChange={props.change}\r\n            />\r\n            <button>Wyszukaj</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Form;\r\n","import React from 'react';\r\n\r\nconst Result = (props) => {\r\n\r\n    const { icon, city, sunrise, sunset, temp, wind, pressure, timezone, err } = props.weatherData;\r\n    let content = null;\r\n    if (!err && city) {\r\n        const sunriseTime = new Date((sunrise + timezone - 3600) * 1000).toLocaleTimeString();\r\n        const sunsetTime = new Date((sunset + timezone - 3600) * 1000).toLocaleTimeString();\r\n        const cityText = city.toUpperCase();\r\n\r\n        content = (\r\n            <div className=\"result\">\r\n                <h1>{cityText}</h1>\r\n                <img\r\n                    className=\"icon\"\r\n                    src={`https://openweathermap.org/img/w/${icon}.png`}\r\n                    alt=\"weather-img\"\r\n                />\r\n                <h4 className=\"temp\">{temp.toFixed(0)}&deg;C</h4>\r\n                <h4>Wschód słońca: <span>{sunriseTime}</span></h4>\r\n                <h4>Zachód słońca: <span>{sunsetTime}</span></h4>\r\n                <h4>Ciśnienie: <span>{pressure}</span> hPa</h4>\r\n                <h4>Prędkość wiatru: <span>{wind}</span> km/h</h4>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {err ? <p>{`Nie mamy w bazie miasta ${city}`}</p> : content}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Result;","import React, { Component } from 'react';\nimport Form from './Form';\nimport Result from './Result';\nimport './App.css';\n\n// klucz do API: \nconst APIkey = '995f07ec53007d3b26c951d21ce9c543';\n\nclass App extends Component {\n  state = {\n    value: \"\",\n    icon: \"\",\n    city: \"\",\n    sunrise: \"\",\n    sunset: \"\",\n    temp: \"\",\n    wind: \"\",\n    pressure: \"\",\n    timezone: \"\",\n    err: false,\n  }\n\n\n\n  handleInputChange = (e) => {\n    this.setState({\n      value: e.target.value\n    })\n  }\n\n  handleCitySubmit = (e) => {\n    e.preventDefault();\n    const API = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=${APIkey}&units=metric`;\n    fetch(API)\n      .then(response => {\n        if (response.ok === true) {\n          return response\n        } throw Error(\"Nie udało się pobrać danych. Spróbuj ponownie póżniej...\")\n      })\n      .then(response => response.json())\n      .then(data => {\n        this.setState(prevState => ({\n          err: false,\n          city: prevState.value,\n          icon: data.weather[0].icon,\n          sunrise: data.sys.sunrise,\n          sunset: data.sys.sunset,\n          temp: data.main.temp,\n          wind: data.wind.speed,\n          pressure: data.main.pressure,\n          timezone: data.timezone,\n          value: \"\",\n        }))\n\n      })\n      .catch(err => {\n        console.log(err);\n\n        this.setState(prevState => ({\n          err: true,\n          city: prevState.value\n        }))\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <h1>Aplikacja Pogodowa</h1>\n        <Form\n          value={this.state.value}\n          change={this.handleInputChange}\n          submit={this.handleCitySubmit}\n        />\n        <Result weatherData={this.state} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}